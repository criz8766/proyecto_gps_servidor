# .github/workflows/ci-pipeline.yml

# Nombre del workflow, aparecerá en la pestaña "Actions" de GitHub
name: CI - Construir y Publicar Imágenes Docker

# ¿Cuándo se ejecuta este workflow?
on:
  push:
    branches:
      - main # Solo cuando se hace push a la rama 'main'

jobs:
  # Definimos un único "trabajo" que hará todo el proceso
  build-and-push:
    # Usamos la última versión de Ubuntu que ofrece GitHub
    runs-on: ubuntu-latest
    
    steps:
      # Paso 1: Descargar el código de tu repositorio
      - name: Checkout del repositorio
        uses: actions/checkout@v4

      # Paso 2: Iniciar sesión en GitHub Container Registry (GHCR)
      - name: Iniciar sesión en GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }} # Tu nombre de usuario de GitHub
          password: ${{ secrets.GITHUB_TOKEN }} # Un token especial que GitHub provee automáticamente

      # Paso 3: Construir y subir la imagen de "pacientes"
      - name: Construir y subir imagen de pacientes
        uses: docker/build-push-action@v5
        with:
          context: ./pacientes # La carpeta donde está el Dockerfile
          file: ./pacientes/Dockerfile
          push: true # Le decimos que suba la imagen al registro
          tags: ghcr.io/criz8766/proyecto_gps_servidor/pacientes:latest

      # Paso 4: Construir y subir la imagen de "inventario"
      - name: Construir y subir imagen de inventario
        uses: docker/build-push-action@v5
        with:
          context: ./inventario
          file: ./inventario/Dockerfile
          push: true
          tags: ghcr.io/criz8766/proyecto_gps_servidor/inventario:latest

      # Paso 5: Construir y subir la imagen del "frontend" (con variables)
      - name: Construir y subir imagen de frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ghcr.io/criz8766/proyecto_gps_servidor/frontend:latest
          # Inyectamos las variables de entorno como argumentos de construcción
          build-args: |
            REACT_APP_AUTH0_DOMAIN=${{ secrets.AUTH0_DOMAIN }}
            REACT_APP_AUTH0_CLIENT_ID=${{ secrets.AUTH0_CLIENT_ID }}
            REACT_APP_AUTH0_API_AUDIENCE=${{ secrets.AUTH0_API_AUDIENCE }}
            REACT_APP_PACIENTES_API_URL=/api/pacientes
            REACT_APP_INVENTARIO_API_URL=/api/inventario